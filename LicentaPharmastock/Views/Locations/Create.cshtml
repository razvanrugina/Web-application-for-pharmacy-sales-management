@model LicentaPharmastock.Models.Location

@{
    ViewData["Title"] = "Create";
}

<h1>Create Location</h1>

<div class="row">
    <div class="row-md-6">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="row">
                <!-- LEFT COLUMN: Text Inputs -->
                <div class="col-md-6">
                    <div class="form-group mb-5 mt-2">
                        <label asp-for="name" class="control-label"></label>
                        <input asp-for="name" class="form-control" />
                        <span asp-validation-for="name" class="text-danger"></span>
                    </div>

                    <div class="form-group position-relative mb-5">
                        <label asp-for="address" class="control-label"></label>
                        <input asp-for="address" id="addressInput" class="form-control" autocomplete="off" />
                        <div id="autocompleteResults"
                             class="list-group position-absolute w-100"
                             style="z-index: 999; max-height: 200px; overflow-y: auto;">
                        </div>
                        <span asp-validation-for="address" class="text-danger"></span>
                    </div>
                    <!-- Submit button below both columns -->
                    <div class="form-group mt-3">
                        <input type="submit" value="Create" class="custom-btn" />
                    </div>
                </div>

                <!-- RIGHT COLUMN: Map -->
                <div class="col-md-6">
                    <div class="form-group">
                        <label>Pick the location on map:</label>
                        <div id="map" style="height: 60vh; width: 80vh; border: 1px solid #ccc;"></div>
                    </div>
                </div>
            </div>

            <!-- Hidden inputs for coordinates -->
            <input type="hidden" asp-for="Latitude" id="Latitude" />
            <input type="hidden" asp-for="Longitude" id="Longitude" />

        </form>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>
        let map = L.map('map').setView([45.9432, 24.9668], 7); // Romania center
        let marker;

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        const addressInput = document.getElementById('addressInput');
        const latitudeInput = document.getElementById('Latitude');
        const longitudeInput = document.getElementById('Longitude');
        const resultsBox = document.getElementById('autocompleteResults');

        function placeMarker(lat, lon) {
            if (!marker) {
                marker = L.marker([lat, lon]).addTo(map);
            } else {
                marker.setLatLng([lat, lon]);
            }

            latitudeInput.value = lat;
            longitudeInput.value = lon;
            map.setView([lat, lon], 15);
        }

        async function reverseGeocode(lat, lon) {
            const res = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}`);
            const data = await res.json();
            return data.display_name;
        }

        map.on('click', async function (e) {
            const lat = e.latlng.lat;
            const lon = e.latlng.lng;
            placeMarker(lat, lon);

            const address = await reverseGeocode(lat, lon);
            addressInput.value = address;
            resultsBox.innerHTML = '';
        });

        async function searchAddress(query) {
            const res = await fetch(`https://nominatim.openstreetmap.org/search?format=jsonv2&q=${encodeURIComponent(query)}&limit=5`);
            return await res.json();
        }

        function clearResults() {
            resultsBox.innerHTML = '';
        }

        addressInput.addEventListener('input', async function () {
            const query = this.value;
            if (query.length < 3) {
                clearResults();
                return;
            }

            const results = await searchAddress(query);
            if (!results.length) {
                clearResults();
                return;
            }

            resultsBox.innerHTML = results.map(r =>
                `<a href="#" class="list-group-item list-group-item-action" data-lat="${r.lat}" data-lon="${r.lon}">
                    ${r.display_name}
                </a>`
            ).join('');

            document.querySelectorAll('#autocompleteResults a').forEach(item => {
                item.addEventListener('click', function (e) {
                    e.preventDefault();
                    const lat = this.dataset.lat;
                    const lon = this.dataset.lon;
                    const display = this.innerText;

                    placeMarker(lat, lon);
                    addressInput.value = display;
                    clearResults();
                });
            });
        });

        document.addEventListener('click', function (e) {
            if (!resultsBox.contains(e.target) && e.target !== addressInput) {
                clearResults();
            }
        });
    </script>
}
